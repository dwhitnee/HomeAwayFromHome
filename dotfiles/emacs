;; -*-lisp-*-
;;  Common Emacs configuration file
;;  site-specific stuff should be in .emacs.local
;; ____________________________________________________________________________
;; Aquamacs custom-file warning:
;; Warning: After loading this .emacs file, Aquamacs will also load
;; customizations from `custom-file' (customizations.el). Any settings there
;; will override those made here.
;; Consider moving your startup settings to the Preferences.el file, which
;; is loaded after `custom-file':
;; ~/Library/Preferences/Aquamacs Emacs/Preferences
;; _____________________________________________________________________________


;; ========= New stuff ===========
;;;; package.el
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(require 'package)
;;(setq package-user-dir (expand-file-name "elpa/" dot-emacs-dir))
(setq package-user-dir (expand-file-name "elpa/" user-emacs-directory))
;; (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)

;;; md Markdown mode
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

;;;; magit
(use-package magit
  :ensure t
  :bind   ("C-x g" . magit-status))


;;;; js2-mode
(use-package js2-mode
  :ensure t
  :config (progn
            (add-hook 'js2-mode-hook      'my-javascript-mode-hook)))


;;;; flycheck  (various lints)
(use-package flycheck
  :ensure t
  :config (progn
            (setq flycheck-mode-line-lighter " fl")
            (add-hook 'after-init-hook 'global-flycheck-mode)))

;; ========= end new stuff ===========






;; shared stuff
;(add-to-list 'load-path "~/emacs.d")
;(add-to-list 'load-path "~/emacs.d/site")

;; (add-to-list 'default-frame-alist '(foreground-color . "white"))
(add-to-list 'default-frame-alist '(background-color . "gray"))

(display-time)
(setq inhibit-splash-screen t)

;; tell emacs to stop being clever with the backspace key
(normal-erase-is-backspace-mode 0)

;; tidy up whitespace in code
(defun my-global-save-hook ()
  (save-excursion
    (delete-trailing-whitespace)
    (untabify (point-min) (point-max))
  )
)


(add-hook 'before-save-hook 'my-global-save-hook)

;(add-hook 'before-save-hook 'delete-trailing-whitespace)
;(add-hook 'before-save-hook (lambda () (untabify (point-min) (point-max))))

(add-to-list 'default-frame-alist '(tool-bar-lines . 0) )
(add-to-list 'default-frame-alist '(menu-bar-lines . 0) )
(add-to-list 'initial-frame-alist '(tool-bar-lines . 0) )
(add-to-list 'initial-frame-alist '(menu-bar-lines . 0) )
; (add-hook 'emacs-startup-hook (lambda () (tool-bar-mode -1)))
; (tool-bar-mode nil)
; (menu-bar-mode nil)

;; kill annoying "File <foo> changed on disk.  Reread from disk" modal
(setq use-dialog-box nil)

(setq comint-process-echoes t)     ;; don't echo shell commands
(setq c-tab-always-indent nil)     ;; no tabs!!!
(setq visible-bell t)
(setq display-time-day-and-date 1)
(setq default-major-mode 'indented-text-mode)

;(setq text-mode-hook 'turn-on-auto-fill)
;; Set the debug option to enable a backtrace when a problem occurs.
; (setq debug-on-error t)


;;----------------------- Keys and Definitions ------------------------------

;; (autoload 'sql-oracle "sql" "Interactive SQL mode." t)

(defun scroll-one-line-up (&optional arg)
  "Scroll the selected window up (forward in the text) one line (or N lines)."
  (interactive "p")
  (scroll-up (or arg 1)))

(defun scroll-one-line-down (&optional arg)
  "Scroll the selected window down (backward in the text) one line (or N)."
  (interactive "p")
  (scroll-down (or arg 1)))

;; --- scroll wheel ---
(defun up-slightly () (interactive) (scroll-up 5))
(defun down-slightly () (interactive) (scroll-down 5))
(global-set-key [mouse-4] 'down-slightly)
(global-set-key [mouse-5] 'up-slightly)

; (mouse-wheel-mode 1)

(defun set-tab-4 (&optional arg) "set tab width to 4" (interactive "p")
  (setq tab-width 4))
(defun set-tab-8 (&optional arg) "set tab width to 8" (interactive "p")
  (setq tab-width 8))

(global-set-key [f4]  'set-tab-4)
(global-set-key [f8]  'set-tab-8)

(global-set-key ""  'fixup-whitespace)

;;(global-set-key [delete] 'delete-char)
;;(global-set-key [backspace] 'backward-delete-char-untabify)

(global-set-key [C-up]    'previous-line)
(global-set-key [C-down]  'next-line)
(global-set-key [C-left]  'backward-word)
(global-set-key [C-right] 'forward-word)

(global-set-key [M-up]    'scroll-one-line-up)
(global-set-key [M-down]  'scroll-one-line-down)
(global-set-key [M-left]  'beginning-of-line)
(global-set-key [M-right] 'end-of-line)

(global-set-key "\M-z"  'undo)

(global-set-key "\C-z"  'scroll-one-line-up)
(global-set-key "\C-\\" 'scroll-one-line-down)
(global-set-key "\C-h"  'backward-delete-char-untabify)
(global-set-key "\M-" 'help-for-help)        ; META ^H
(global-set-key "\M- "  'dabbrev-expand)       ; META TAB
(setq dabbrev-case-replace nil)

(global-set-key ""  'make-frame)
(global-set-key ""  'ediff-revision)
;(global-set-key [f5]  'ediff-revision)


;;----------------------------------------------------------------------
;; fix arrow keys in dialup windows
;;----------------------------------------------------------------------
(if (not window-system)             ;; Only use in tty-sessions.
    (progn
      (defvar arrow-keys-map (make-sparse-keymap) "Keymap for arrow keys")
      (define-key esc-map "O" arrow-keys-map)
      (define-key arrow-keys-map "A" 'previous-line)
      (define-key arrow-keys-map "B" 'next-line)
      (define-key arrow-keys-map "C" 'forward-char)
      (define-key arrow-keys-map "D" 'backward-char)
      )
  )

;; --------------------- Glenn's cool stuff ------------------------------

(global-set-key "\C-\M-l" 'what-line)
(global-set-key "\C-\M-j" 'goto-line)

(fset 'comment "m/*  */m")
(fset 'decomment "m")
(global-set-key "c" 'comment)
(global-set-key "" 'decomment)

;; chop weirdness

;; (autoload 'chop-move-up "chop" nil t)
;; (autoload 'chop-move-down "chop" nil t)
(global-set-key "\C-p" 'chop-move-up)
(global-set-key "\C-n" 'chop-move-down)


;;----------------------------------------------------------------------
;; Ruby Stuff

; (autoload 'ruby-mode "ruby-mode" "Major mode for editing ruby scripts." t)
; (setq auto-mode-alist (cons '("\\.rb$" . ruby-mode) auto-mode-alist))
(setq interpreter-mode-alist
      (append '(("ruby" . ruby-mode)) interpreter-mode-alist))

(setq ruby-indent-level 2)
(setq perl-indent-level 2)
(setq css-indent-offset 2)

;;----------------------------------------------------------------------




;;----------------------------------------------------------------------
;; attach modes to file types
;;----------------------------------------------------------------------

;; why?
(autoload 'js2-mode "js2" nil t)
;;(require 'js-doc)

(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

(add-to-list 'auto-mode-alist '("\\.less$" . css-mode))

;; (add-to-list 'auto-mode-alist '("\\.html$"  . xml-mode))
(add-to-list 'auto-mode-alist '("\\.jsp$"   . xml-mode))

(add-to-list 'auto-mode-alist '("\\.java$" . java-mode))

(add-to-list 'auto-mode-alist '("\\.rb$"    . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rhtml$" . xml-mode))

(add-to-list 'auto-mode-alist '("\\.c\\'"    . c++-mode))
(add-to-list 'auto-mode-alist '("\\.h\\'"    . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cc\\'"   . c++-mode))
(add-to-list 'auto-mode-alist '("\\.hh\\'"   . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cxx\\'"  . c++-mode))
(add-to-list 'auto-mode-alist '("\\.hxx\\'"  . c++-mode))
(add-to-list 'auto-mode-alist '("\\.c++\\'"  . c++-mode))
(add-to-list 'auto-mode-alist '("\\.h++\\'"  . c++-mode))

;; (nconc mode-list auto-mode-alist)
;; (setq auto-mode-alist mode-list)



;;;
;;; JSP font/syntax Colors - kinda blows
;;;
;;; highlighted region
; (add-to-list 'auto-mode-alist '("\\.jsp\\'"  . jsp-mode))
; (add-to-list 'auto-mode-alist '("\\.jsp\\'"  . html-helper-mode))

(set-face-foreground  'region  "Black")
(set-face-background  'region  "LightCyan")
(set-face-background 'secondary-selection "dodger blue")

;;; hyperlinks
(set-face-foreground  'highlight  "DarkGreen")
(set-face-background  'highlight  "white")

;;; code syntax colors
(set-face-foreground  'font-lock-comment-face  "grey30")
;(set-face-foreground  'font-lock-doc-face  "DarkViolet")
(set-face-foreground  'font-lock-constant-face  "Black")
(set-face-foreground  'font-lock-string-face  "DarkOrange4")
(set-face-foreground  'font-lock-keyword-face  "Black")
(set-face-foreground  'font-lock-type-face  "Black")
(set-face-foreground  'font-lock-variable-name-face  "Black")
;(set-face-foreground  'font-lock-function-name-face  "Black")





(defconst my-c-style
  '((c-offsets-alist . ((case-label        . +)
                        (substatement-open . 0))
    ))
  "Dave's C Programming Style")


;;----------------------------------------------------------------------
;; Programming mode hooks
;;----------------------------------------------------------------------

(defun my-c-mode-hook ()
  ;; my customizations for all of c-mode, c++-mode, and objc-mode
  ;; add my personal style and set it for the current buffer
  (c-add-style "PERSONAL" my-c-style t)
  (setq c-basic-offset 4)
  (setq c-brace-offset -4)
  (make-local-variable 'tab-width)
  (setq indent-tabs-mode 'nil)
  )

(defun my-java-mode-hook ()
  ;; my customizations for java mode
  (setq html-helper-basic-offset     4)
  (c-set-offset 'inline-open        0)     ;; for function braces
  (setq tab-width                   8)
  (setq indent-tabs-mode nil)
)

(defun my-javascript-mode-hook ()
  ;; my customizations for javascript mode
  (setq js2-include-node-externs t)
  (setq js2-bounce-indent-flag nil)
  (setq js2-highlight-level 3)
  (setq js2-basic-offset 2)
  ;; no auto-closing parens/quotes
;;  (set-face-foreground 'js2-external-variable-face "DarkRed")
  (setq indent-tabs-mode nil);   ;; no tab chars, just spaces
  (global-set-key ""  'comment-region)

  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'before-save-hook (lambda () (untabify (point-min) (point-max))))
)
(setq js2-mirror-mode nil)


(defun my-xml-mode-hook ()
  (setq indent-tabs-mode nil)  ;; no tabs
  (setq sgml-basic-offset 2)
)


(add-hook 'c-mode-common-hook 'my-c-mode-hook)
(add-hook 'java-mode-hook     'my-java-mode-hook)
(add-hook 'xml-mode-hook      'my-xml-mode-hook)




(defun cleanse-buffer (&optional arg)
       "Remove trailing white space, convert tabs to spaces, remove CR's, etc."
       (interactive "p")
       (setq max-column-num 0
             max-column-line-num 0)
       (save-excursion
          (untabify (point-min) (point-max))
          (replace-string "\^M" "")
          (beginning-of-buffer)
          (replace-regexp "" "")
          (beginning-of-buffer)
          (if (equal arg "C")
              (message "Formatting C source code"))
          (while (not (eobp))
              (if (equal arg "C")
                 (c-indent-command))
              (end-of-line)
              (delete-horizontal-space)
              (if ( > (current-column) max-column-num)
                  (setq max-column-num (current-column)
                        max-column-line-num (count-lines (point-min) (point))))
              (forward-line)
          )
          (while (= (preceding-char) 10) (backward-delete-char 1))
          (insert-char 10 1)
       )
       (message "Maximum column = %d (line %d)"
           max-column-num max-column-line-num)
)


;;----------------------------------------------------------------------
;;  highlighting
;;----------------------------------------------------------------------

;; no bold with small font, looks like crap
;; must come before hilit19

;; do highlighting if in X
;; (if (not (not window-system))
;;     (progn
;;       (load "hilit19")

;;       (hilit-set-mode-patterns
;;        'java-mode
;;        '(
;;       ;; comments - do the javadoc ones differently
;;       ("/\\*\\*" "\\*/" gray30)
;;       ("/\\*" "\\*/" gray30)
;;       ("//.*$" nil gray30)

;;       ;; strings
;;       (hilit-string-find ?' darkorange4)
;;       )
;;        )
;;       (hilit-set-mode-patterns
;;        'js2-mode
;;        '(
;;       ;; comments - do the javadoc ones differently
;;       ("//.*$" nil gray30)
;;       )
;;        )

;;       ;;      (hilit-string-find ?' DarkGoldenrod)

;;       (setq hilit-quietly t)

;;    (hilit-translate comment    'grey30
;;                     string     'darkorange4
;;                     )
;;       )
;;   )



(put 'upcase-region 'disabled nil)

;(set-face-foreground  'font-lock-reference-face     "red" )
(set-face-foreground  'font-lock-keyword-face       "grey20" )
(set-face-foreground  'font-lock-warning-face       "blue" )
(set-face-foreground  'font-lock-function-name-face "purple" )
(set-face-foreground  'font-lock-comment-face       "grey30" )

(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)

;;(custom-set-variables
  ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
;; '(js2-mirror-mode nil))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


(eval-after-load "ediff"
  '(progn
     (setq ediff-window-setup-function 'ediff-setup-windows-plain)
))

;; (eval-after-load "ediff"
;;   '(progn
;;      ;; Turn off help echoing for ediff overlays.  This is better for
;;      ;; slow network connections.
;;      (defun ediff-set-overlay-face (extent face)
;;        (ediff-overlay-put extent 'face face))

;;      ;; Don't create a new frame for ediff control.  That can take
;;      ;; a long time if running over a slow connection.
;;      (setq ediff-window-setup-function 'ediff-setup-windows-plain)

;;      ;; In ediff, show the two buffers side-by-side.
;;      (setq ediff-split-window-function 'split-window-horizontally)
;; ))


;; local stuff
(load "~/.emacs.local" t)





(defun ediff-current-buffer-revision ()
  "Run Ediff to diff current buffer's file against VC depot.
Uses `vc.el' or `rcs.el' depending on `ediff-version-control-package'."
  (interactive)
  (let ((file (or (buffer-file-name)
          (error "Current buffer is not visiting a file"))))
(if (and (buffer-modified-p)
     (y-or-n-p (message "Buffer %s is modified. Save buffer? "
                (buffer-name))))
    (save-buffer (current-buffer)))
(ediff-load-version-control)
(funcall
 (intern (format "ediff-%S-internal" ediff-version-control-package))
 "" "" nil)))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages '(flycheck js2-mode magit markdown-mode use-package)))
